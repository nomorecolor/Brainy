@using Blazored.SessionStorage;
@using Brainy.Contracts.Enums;
@using System.Text.Json;

@implements IDisposable

@inject ISessionStorageService sessionStorageService

<CascadingValue Value="_stateData">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	private readonly StateData _stateData = new StateData();

	protected override void OnInitialized() => _stateData.OnStateChanged += OnStateChanged;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadStateFromSessionStorage();
		}
	}

	public void Dispose() => _stateData.OnStateChanged -= OnStateChanged;

	private async void OnStateChanged()
	{
		await SaveStateToSessionStorage();

		await InvokeAsync(StateHasChanged);
	}

	private async Task SaveStateToSessionStorage()
	{
		await sessionStorageService.SetItemAsync(nameof(_stateData.Categories), _stateData.Categories);
		await sessionStorageService.SetItemAsync(nameof(_stateData.Round), _stateData.Round);
	}

	private async Task LoadStateFromSessionStorage()
	{
		_stateData.Categories = await sessionStorageService.GetItemAsync<HashSet<Category>>(nameof(_stateData.Categories))
			?? Enum.GetValues(typeof(Category)).Cast<Category>().ToHashSet();
		_stateData.Round = await sessionStorageService.GetItemAsync<int>(nameof(_stateData.Round));
	}
}
